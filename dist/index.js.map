{"version":3,"sources":["../src/actions/generate-meme.ts","../src/index.ts"],"sourcesContent":["import {\n    Action,\n    ActionExample,\n    composeContext,\n    elizaLogger,\n    generateText,\n    HandlerCallback,\n    IAgentRuntime,\n    Media,\n    Memory,\n    ModelClass,\n    State,\n} from \"@elizaos/core\";\n\nconst imgflipApiBaseUrl = \"https://api.imgflip.com\";\n\ninterface ImgflipTemplate {\n    id: string;\n    name: string;\n    url: string;\n    width: number;\n    height: number;\n    box_count: number;\n}\n\ninterface ImgflipSearchResponse {\n    success: boolean;\n    data: {\n        memes: ImgflipTemplate[];\n    };\n    error_message?: string;\n}\n\ninterface ImgflipCaptionResponse {\n    success: boolean;\n    data: {\n        url: string;\n        page_url: string;\n    };\n    error_message?: string;\n}\n\nasync function findImgflipTemplate(\n    runtime: IAgentRuntime,\n    message: string\n): Promise<string> {\n    const context = `\n# Task: Find the best imgflip.com template for a meme, based on the user's message.\nThe message is:\n${message}\n\n# Instructions:\nGet creative, don't stick to the most popular templates.\nOnly respond with the template name, do not include any other text.`;\n\n    const response = await generateText({\n        runtime,\n        context,\n        modelClass: ModelClass.MEDIUM,\n    });\n\n    return response;\n}\n\nasync function getImgflipTemplate(template: string): Promise<ImgflipTemplate> {\n    // Use the search_memes endpoint to find the template\n    const formData = new URLSearchParams({\n        username: process.env.IMGFLIP_USERNAME,\n        password: process.env.IMGFLIP_PASSWORD,\n        query: template,\n    });\n\n    const response = await fetch(`${imgflipApiBaseUrl}/search_memes`, {\n        method: \"POST\",\n        body: formData,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n    });\n\n    const result: ImgflipSearchResponse = await response.json();\n\n    if (!result.success || !result.data.memes.length) {\n        // If search fails, fallback to getting all memes\n        const allMemesResponse = await fetch(`${imgflipApiBaseUrl}/get_memes`);\n        const allMemes = await allMemesResponse.json();\n\n        if (!allMemes.success || !allMemes.data.memes.length) {\n            throw new Error(\"Failed to find meme template\");\n        }\n\n        // Try to find close matches\n        const closeMatches = allMemes.data.memes.filter(\n            (meme) =>\n                meme.name.toLowerCase().includes(template.toLowerCase()) ||\n                template.toLowerCase().includes(meme.name.toLowerCase())\n        );\n\n        if (closeMatches.length === 0) {\n            // If no match found, return a random popular template\n            const randomIndex = Math.floor(\n                Math.random() * Math.min(10, allMemes.data.memes.length)\n            );\n            return allMemes.data.memes[randomIndex];\n        }\n\n        // Return a random template from close matches\n        const randomIndex = Math.floor(Math.random() * closeMatches.length);\n        return closeMatches[randomIndex];\n    }\n\n    // Return a random template from search results\n    const randomIndex = Math.floor(Math.random() * result.data.memes.length);\n    return result.data.memes[randomIndex];\n}\n\nasync function generateMemeCaptions(\n    runtime: IAgentRuntime,\n    message: string,\n    state: State,\n    imgflipTemplate: string,\n    captionsCount: number\n): Promise<string[]> {\n    const template = `\n# About Arony:\n{{bio}}\n{{lore}}\n\n# Task: Generate captions for a meme, based on a imgflip.com template, the user's message and a number of captions.\nThe template is: **${imgflipTemplate}**\nThe message is:\n${message}\nGenerate **${captionsCount}** captions for the meme.\n\n# Instructions:\nOnly respond with the captions - one per line, do not include any other text.`;\n\n    const context = await composeContext({\n        state,\n        template,\n    });\n\n    elizaLogger.debug(\"generateMemeCaptions context: \", context);\n\n    const response = await generateText({\n        runtime,\n        context,\n        modelClass: ModelClass.MEDIUM,\n    });\n\n    return response.split(\"\\n\");\n}\n\nasync function genereateMeme(\n    imgflipTemplate: ImgflipTemplate,\n    captions: string[]\n): Promise<string> {\n    const username = process.env.IMGFLIP_USERNAME;\n    const password = process.env.IMGFLIP_PASSWORD;\n\n    if (!username || !password) {\n        throw new Error(\"Imgflip credentials not configured. Please set IMGFLIP_USERNAME and IMGFLIP_PASSWORD environment variables.\");\n    }\n\n    // Create form data with template ID and credentials\n    const formData = new URLSearchParams({\n        template_id: imgflipTemplate.id,\n        username,\n        password,\n    });\n\n    // Add each caption as text0, text1, etc.\n    captions.forEach((text, index) => {\n        formData.append(`boxes[${index}][text]`, text);\n        formData.append(`boxes[${index}][color]`, \"#FFFFFF\");\n        formData.append(`boxes[${index}][outline_color]`, \"#000000\");\n    });\n\n    const response = await fetch(`${imgflipApiBaseUrl}/caption_image`, {\n        method: \"POST\",\n        body: formData,\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n    });\n\n    const result: ImgflipCaptionResponse = await response.json();\n\n    if (!result.success || !result.data.url) {\n        throw new Error(`Failed to generate meme: ${result.error_message}`);\n    }\n\n    return result.data.url;\n}\n\nexport interface Meme {\n    url: string;\n    text: string;\n}\n\nexport async function generateMemeActionHandler(\n    runtime: IAgentRuntime,\n    message: string,\n    state: State\n): Promise<Meme> {\n    // STEPS\n    // 1. Generate the best imgflip template for the meme based on the message -> LLM call\n    // 2. Get the template's captions number from imgflip -> imgflip API call\n    // 2. Generate the captions for the meme, based on the template (**also consider the agent character**) -> LLM call\n    // 3. Generate the meme -> imgflip API call\n    // 5. Return the meme url and text, description of the meme\n\n    const template = await findImgflipTemplate(runtime, message);\n    const imgflipTemplate = await getImgflipTemplate(template);\n    const captions = await generateMemeCaptions(\n        runtime,\n        message,\n        state,\n        template,\n        imgflipTemplate.box_count\n    );\n\n    const url = await genereateMeme(imgflipTemplate, captions);\n    const text = `Generated a meme, using imgflip.com:\nMeme template: \"${template}\".\nCaptions:\n${captions.join(\"\\n\")}\nMeme URL: ${url}`;\n\n    return {\n        url,\n        text,\n    };\n}\n\nexport const generateMemeAction: Action = {\n    name: \"GENERATE_MEME\",\n    similes: [\"MAKE_MEME\", \"NEW_MEME\", \"GENERATE_NEW_MEME\", \"MAKE_NEW_MEME\"],\n    description: \"Use this action to generate a meme\",\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback: HandlerCallback\n    ) => {\n        const meme = await generateMemeActionHandler(\n            runtime,\n            message.content.text,\n            state\n        );\n\n        const newMemory: Memory = {\n            ...message,\n            userId: message.agentId,\n            content: {\n                text: meme.text,\n                attachments: [\n                    {\n                        url: meme.url,\n                    } as Media,\n                ],\n                action: \"GENERATE_MEME\",\n                source: message.content.source,\n            },\n        };\n\n        await runtime.messageManager.createMemory(newMemory);\n\n        callback({\n            text: \"\",\n            attachments: newMemory.content.attachments,\n        });\n\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you make a meme about programming bugs?\",\n                },\n            },\n            {\n                user: \"{{assistant}}\",\n                content: {\n                    text: \"I'll generate a meme about programming bugs.\",\n                    action: \"GENERATE_MEME\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Generate a funny meme about Monday mornings\",\n                },\n            },\n            {\n                user: \"{{assistant}}\",\n                content: {\n                    text: \"I'll create a meme about Monday mornings for you!\",\n                    action: \"GENERATE_MEME\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I need a meme that shows how I feel about deadlines\",\n                },\n            },\n            {\n                user: \"{{assistant}}\",\n                content: {\n                    text: \"Let me make a meme about dealing with deadlines.\",\n                    action: \"GENERATE_MEME\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Make me a meme about pizza\",\n                },\n            },\n            {\n                user: \"{{assistant}}\",\n                content: {\n                    text: \"I'll generate a meme about pizza for you.\",\n                    action: \"GENERATE_MEME\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a funny meme about working from home\",\n                },\n            },\n            {\n                user: \"{{assistant}}\",\n                content: {\n                    text: \"I'll make a meme about the work from home life.\",\n                    action: \"GENERATE_MEME\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want a meme about trying to explain code to non-programmers\",\n                },\n            },\n            {\n                user: \"{{assistant}}\",\n                content: {\n                    text: \"I'll generate a meme about explaining code to non-programmers.\",\n                    action: \"GENERATE_MEME\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\";\nimport { generateMemeAction, generateMemeActionHandler, Meme } from \"./actions\";\n\nexport { generateMemeAction, generateMemeActionHandler, Meme };\n\nexport const imgflipPlugin: Plugin = {\n    name: \"imgflip\",\n    description: \"Generate memes using imgflip.com\",\n    actions: [generateMemeAction],\n    evaluators: [],\n    providers: [],\n};\nexport default imgflipPlugin;\n"],"mappings":"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","names":["randomIndex"]}